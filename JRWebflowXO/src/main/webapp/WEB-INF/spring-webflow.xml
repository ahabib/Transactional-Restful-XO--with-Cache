<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:p="http://www.springframework.org/schema/p"
 xmlns:flow="http://www.springframework.org/schema/webflow-config"
xsi:schemaLocation="http://www.springframework.org/schema/webflow-config
http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.3.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

  <!-- This is default Spring Webflow config that registers the registry with the flow executor -->
  <flow:flow-executor id="flowExecutor"
                      flow-registry="flowRegistry">
  	 <!-- <flow:flow-execution-listeners>
             <flow:listener ref="securityListener"/>
						 <flow:listener ref="persistenceListener"/>
    </flow:flow-execution-listeners>    -->
  </flow:flow-executor>        
     
     
  <!-- Web Flow 2 maps selected view identifiers to files located within the flow's working directory unless
			otherwise specified. For existing Spring MVC + Web Flow applications, an external ViewResolver
			already handles this mapping. Therefore, to continue using that resolver and to avoid
			having to change how your existing flow views are packaged, configure Web Flow with flow builder service -->                          
  <flow:flow-registry id="flowRegistry"
                      base-path="/WEB-INF/flows/"
                      flow-builder-services="flowBuilderServices"> 
      <!--  xo flows should have mapping similiar to $base-path/xoflow/xo-flow.xml where xoflow is flow ID --> 
    <flow:flow-location-pattern value="*-flow.xml" />
  </flow:flow-registry>
  
  <flow:flow-builder-services id="flowBuilderServices" view-factory-creator="mvcViewFactoryCreator"/> 
  
  <!-- The MvcViewFactoryCreator is the factory that allows you to configure how the Spring MVC view system
				is used inside Spring Web Flow. Use it to configure existing ViewResolvers, as well as other services
				such as a custom MessageCodesResolver. -->
  <bean id="mvcViewFactoryCreator" class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
		<property name="viewResolvers">
		  <list>
        <ref bean="htmlViewResolver"/>
      </list>
    </property>
	</bean>
  
  <!-- Maps request paths to flows in the flowRegistry; e.g. a path of
  	  /hotels/booking looks for a flow with id "hotels/booking". -->
  <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping"
    p:flowRegistry-ref="flowRegistry"
    p:order="0"
  />
  
  
  <!-- Dispatches requests mapped to flows to FlowHandler implementations -->
  <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
    <property name="flowExecutor" ref="flowExecutor" />
  </bean>
  
  <!-- The idea here is that during the flow, data is just written to cache,
       and that cache is distributed to support the stateless nature of a flow
       when no server pinning is used between request/response cycles; However,
       when a flow has completed, you may wish to save off data to persistent
       storage  -->
  <!-- 
  <bean id="jpaFlowExecutionListener"
		class="org.springframework.webflow.persistence.JpaFlowExecutionListener">
		<constructor-arg ref="entityManagerFactory" />
		<constructor-arg ref="transactionManager" />
	</bean>
	-->
 
</beans>